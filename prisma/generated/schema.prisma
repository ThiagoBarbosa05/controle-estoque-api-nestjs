// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                String  @id @default(uuid())
  name              String
  document          String  @unique
  contactPerson     String? @map("contact_person")
  email             String? @unique
  cellphone         String?
  businessPhone     String? @map("business_phone")
  stateRegistration String  @unique @map("state_registration")

  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime?   @updatedAt @map("updated_at")
  disabledAt DateTime?   @map("disabled_at")
  address    Address?
  users      User[]
  Consigned  Consigned[]

  @@index([name])
  @@map("customers")
}

model Address {
  id            String  @id @default(uuid())
  streetAddress String?
  zipCode       String?
  state         String?
  city          String?
  neighborhood  String?
  number        String?

  customerId String   @unique @map("customer_id")
  customer   Customer @relation(fields: [customerId], references: [id])

  @@map("addresses")
}

model User {
  id                   String     @id @default(uuid())
  email                String     @unique
  name                 String
  password             String
  roles                UserRole[]
  createdAt            DateTime   @default(now()) @map("created_at")
  updatedAt            DateTime   @updatedAt @map("updated_at")
  associatedCustomerId String?    @map("associated_customer_id")
  customer             Customer?  @relation(fields: [associatedCustomerId], references: [id])

  @@map("users")
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String @map("role_id")
  permissionId String @map("permission_id")

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model Wine {
  id       String  @id @default(uuid())
  name     String
  harvest  Int?
  type     String
  price    Int
  producer String?
  country  String?
  size     String

  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
  WineOnConsigned WineOnConsigned[]

  @@index([name])
  @@map("wines")
}

enum ConsignedStatus {
  EM_ANDAMENTO
  CONCLU√çDO
}

model Consigned {
  id               String            @id @default(uuid())
  customerId       String            @map("customer_id")
  customer         Customer          @relation(fields: [customerId], references: [id])
  winesOnConsigned WineOnConsigned[]
  status           ConsignedStatus   @default(EM_ANDAMENTO)

  completedIn DateTime? @map("completed_in")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")

  @@map("consigned")
}

model WineOnConsigned {
  consignedId String @map("consigned_id")
  wineId      String @map("wine_id")

  consigned Consigned @relation(fields: [consignedId], references: [id])
  wines     Wine      @relation(fields: [wineId], references: [id])

  balance Int
  count   Int?

  @@id([consignedId, wineId])
  @@map("wine_on_consigned")
}
